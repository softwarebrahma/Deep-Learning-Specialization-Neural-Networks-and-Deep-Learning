
In [1]: import numpy as np

In [2]: x = ([[1,2], [3,4], [5,6]])

In [4]: x = np.array(x)

In [5]: print(x.shape)
(3, 2)

In [6]: print(x[:, 2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    print(x[:, 2])
IndexError: index 2 is out of bounds for axis 1 with size 2

In [8]: print(x[:,1])
[2 4 6]

In [9]: y = np.array([[1],[2],[3]])

In [10]: print(y.shape)
(3, 1)

In [11]: print(y[:,0])
[1 2 3]

===========

In [12]: z = np.array([1,2,3,4,5])

In [13]: print(z.shape)
(5,)

In [16]: print(z[:,0])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    print(z[:,0])
IndexError: too many indices for array


In [17]: z = np.array([[1]])

In [18]: print(z.shape)
(1, 1)

In [19]: print(z[:,0])
[1]

In [20]: print(np.squeeze(z[:,0]))
1

In [21]: 


===========


In [5]: x = np.array([[["a","e"], ["b","f"]], [["c","g"], ["d","h"]]])

In [6]: print(x.shape)
(2, 2, 2)

In [7]: print(x)
[[['a' 'e']
  ['b' 'f']]

 [['c' 'g']
  ['d' 'h']]]

In [8]: y = x.reshape(x.shape[0], -1)

In [9]: print(y)
[['a' 'e' 'b' 'f']
 ['c' 'g' 'd' 'h']]

In [12]: print(y.shape)
(2, 4)

In [10]: print(y.T)
[['a' 'c']
 ['e' 'g']
 ['b' 'd']
 ['f' 'h']]

In [11]: np.reshape?
Signature: np.reshape(a, newshape, order='C')
Docstring:
Gives a new shape to an array without changing its data.

Parameters
----------
a : array_like
    Array to be reshaped.
newshape : int or tuple of ints
    The new shape should be compatible with the original shape. If
    an integer, then the result will be a 1-D array of that length.
    One shape dimension can be -1. In this case, the value is
    inferred from the length of the array and remaining dimensions.
order : {'C', 'F', 'A'}, optional
    Read the elements of `a` using this index order, and place the
    elements into the reshaped array using this index order.  'C'
    means to read / write the elements using C-like index order,
    with the last axis index changing fastest, back to the first
    axis index changing slowest. 'F' means to read / write the
    elements using Fortran-like index order, with the first index
    changing fastest, and the last index changing slowest. Note that
    the 'C' and 'F' options take no account of the memory layout of
    the underlying array, and only refer to the order of indexing.
    'A' means to read / write the elements in Fortran-like index
    order if `a` is Fortran *contiguous* in memory, C-like order
    otherwise.

Returns
-------
reshaped_array : ndarray
    This will be a new view object if possible; otherwise, it will
    be a copy.  Note there is no guarantee of the *memory layout* (C- or
    Fortran- contiguous) of the returned array.
	
See Also
--------
ndarray.reshape : Equivalent method.

Notes
-----
It is not always possible to change the shape of an array without
copying the data. If you want an error to be raise if the data is copied,
you should assign the new shape to the shape attribute of the array::

 >>> a = np.zeros((10, 2))
 # A transpose make the array non-contiguous
 >>> b = a.T
 # Taking a view makes it possible to modify the shape without modifying
 # the initial object.
 >>> c = b.view()
 >>> c.shape = (20)
 AttributeError: incompatible shape for a non-contiguous array

The `order` keyword gives the index ordering both for *fetching* the values
from `a`, and then *placing* the values into the output array.
For example, let's say you have an array:

>>> a = np.arange(6).reshape((3, 2))
>>> a
array([[0, 1],
       [2, 3],
       [4, 5]])

You can think of reshaping as first raveling the array (using the given
index order), then inserting the elements from the raveled array into the
new array using the same kind of index ordering as was used for the
raveling.

>>> np.reshape(a, (2, 3)) # C-like index ordering
array([[0, 1, 2],
       [3, 4, 5]])
>>> np.reshape(np.ravel(a), (2, 3)) # equivalent to C ravel then C reshape
array([[0, 1, 2],
       [3, 4, 5]])
>>> np.reshape(a, (2, 3), order='F') # Fortran-like index ordering
array([[0, 4, 3],
       [2, 1, 5]])
>>> np.reshape(np.ravel(a, order='F'), (2, 3), order='F')
array([[0, 4, 3],
       [2, 1, 5]])

Examples
--------
>>> a = np.array([[1,2,3], [4,5,6]])
>>> np.reshape(a, 6)
array([1, 2, 3, 4, 5, 6])
>>> np.reshape(a, 6, order='F')
array([1, 4, 2, 5, 3, 6])

>>> np.reshape(a, (3,-1))       # the unspecified value is inferred to be 2
array([[1, 2],
       [3, 4],
       [5, 6]])
File:      /var/lib/python/site-packages/numpy/core/fromnumeric.py
Type:      function


In [15]: a = np.array([[1,2,3], [4,5,6]])

In [16]: print(a.shape)
(2, 3)

In [17]: print(np.reshape(a, (3,-1)))
[[1 2]
 [3 4]
 [5 6]]

In [18]: print(np.reshape(a, (3,-1)).shape)
(3, 2)

In [19]: print(a.shape)
(2, 3)

In [20]: 

===========


In [6]: np.zeros?
Docstring:
zeros(shape, dtype=float, order='C')

Return a new array of given shape and type, filled with zeros.

Parameters
----------
shape : int or sequence of ints
    Shape of the new array, e.g., ``(2, 3)`` or ``2``.
dtype : data-type, optional
    The desired data-type for the array, e.g., `numpy.int8`.  Default is
    `numpy.float64`.
order : {'C', 'F'}, optional
    Whether to store multidimensional data in C- or Fortran-contiguous
    (row- or column-wise) order in memory.

Returns
-------
out : ndarray
    Array of zeros with the given shape, dtype, and order.

See Also
--------
zeros_like : Return an array of zeros with shape and type of input.
ones_like : Return an array of ones with shape and type of input.
empty_like : Return an empty array with shape and type of input.
ones : Return a new array setting values to one.
empty : Return a new uninitialized array.

Examples
--------
>>> np.zeros(5)
array([ 0.,  0.,  0.,  0.,  0.])

>>> np.zeros((5,), dtype=np.int)
array([0, 0, 0, 0, 0])

>>> np.zeros((2, 1))
array([[ 0.],
       [ 0.]])

>>> s = (2,2)
>>> np.zeros(s)
array([[ 0.,  0.],
       [ 0.,  0.]])

>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype
array([(0, 0), (0, 0)],
      dtype=[('x', '<i4'), ('y', '<i4')])
Type:      builtin_function_or_method

In [7]: y = np.zeros(5)

In [8]: print(y)
[ 0.  0.  0.  0.  0.]

In [9]: print(y.shape)
(5,)

In [10]: y = np.zeros((5,1))

In [11]: print(y.shape)
(5, 1)

In [12]: print(y)
[[ 0.]
 [ 0.]
 [ 0.]
 [ 0.]
 [ 0.]]

In [13]: 

===========


In [3]: x = np.array([[1,2,3]])

In [4]: print(x.shape)
(1, 3)

In [5]: y = np.array([[1,2,3]])

In [6]: print(y.shape)
(1, 3)

In [7]: print(x * y)
[[1 4 9]]

In [8]: print(np.sum(x * y))
14

In [9]: print((x * y).shape)
(1, 3)

In [10]: print(1 - x)
[[ 0 -1 -2]]

In [11]: print(np.log(1 - x))
[[-inf  nan  nan]]

In [12]: print(np.log(x))
[[ 0.          0.69314718  1.09861229]]

In [13]: print(x.T)
[[1]
 [2]
 [3]]

In [14]: print(x.T.shape)
(3, 1)

In [15]: 

===========


In [2]: x = np.array([[0.5],[0.6]])

In [3]: print(x.shape)
(2, 1)

In [4]: print(x)
[[ 0.5]
 [ 0.6]]

In [5]: y = x <= 0.5

In [6]: print(y.shape)
(2, 1)

In [7]: print(y)
[[ True]
 [False]]

In [8]: z = x[y]

In [9]: print(z.shape)
(1,)

In [10]: print(z)
[ 0.5]

In [15]: print(np.round([0.5, 0.6]))
[ 0.  1.]

In [16]: print(np.round([0.5, 0.51]))
[ 0.  1.]

In [17]: print(np.round([0.5, 0.50]))
[ 0.  0.]

In [18]: In [18]: print(np.round(x))
[[ 0.]
 [ 1.]]

In [12]: np.round?
Signature: np.round(a, decimals=0, out=None)
Docstring:
Round an array to the given number of decimals.

Refer to `around` for full documentation.

See Also
--------
around : equivalent function
File:      /var/lib/python/site-packages/numpy/core/fromnumeric.py
Type:      function

In [14]: np.around?
Signature: np.around(a, decimals=0, out=None)
Docstring:
Evenly round to the given number of decimals.

Parameters
----------
a : array_like
    Input data.
decimals : int, optional
    Number of decimal places to round to (default: 0).  If
    decimals is negative, it specifies the number of positions to
    the left of the decimal point.
out : ndarray, optional
    Alternative output array in which to place the result. It must have
    the same shape as the expected output, but the type of the output
    values will be cast if necessary. See `doc.ufuncs` (Section
    "Output arguments") for details.

Returns
-------
rounded_array : ndarray
    An array of the same type as `a`, containing the rounded values.
    Unless `out` was specified, a new array is created.  A reference to
    the result is returned.

    The real and imaginary parts of complex numbers are rounded
    separately.  The result of rounding a float is a float.

See Also
--------
ndarray.round : equivalent method

ceil, fix, floor, rint, trunc


Notes
-----
For values exactly halfway between rounded decimal values, NumPy
rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0,
-0.5 and 0.5 round to 0.0, etc. Results may also be surprising due
to the inexact representation of decimal fractions in the IEEE
floating point standard [1]_ and errors introduced when scaling
by powers of ten.

References
----------
.. [1] "Lecture Notes on the Status of  IEEE 754", William Kahan,
       http://www.cs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF
.. [2] "How Futile are Mindless Assessments of
       Roundoff in Floating-Point Computation?", William Kahan,
       http://www.cs.berkeley.edu/~wkahan/Mindless.pdf

Examples
--------
>>> np.around([0.37, 1.64])
array([ 0.,  2.])
>>> np.around([0.37, 1.64], decimals=1)
array([ 0.4,  1.6])
>>> np.around([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value
array([ 0.,  2.,  2.,  4.,  4.])
>>> np.around([1,2,3,11], decimals=1) # ndarray of ints is returned
array([ 1,  2,  3, 11])
>>> np.around([1,2,3,11], decimals=-1)
array([ 0,  0,  0, 10])
File:      /var/lib/python/site-packages/numpy/core/fromnumeric.py
Type:      function

===========


In [3]: x = np.array([[1,2,3,4,5]])

In [4]: print(x.shape)
(1, 5)

In [5]: print(x)
[[1 2 3 4 5]]

In [6]: print(x[0][1])
2

In [7]: print(x[0,1])
2

In [8]: print(x[0,2])
3

In [9]: print(x[0][2])
3

In [10]: 

===========


Broadcasting samples:

In [3]: x = np.random.randn(2,3)

In [4]: y = np.random.randn(2,1)

In [5]: z = x  + y

In [6]: print(z.shape)
(2, 3)

In [7]: a = np.random.randn(4,3)

In [8]: b = np.random.randn(3,2)

In [9]: c = a + b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    c = a + b
ValueError: operands could not be broadcast together with shapes (4,3) (3,2)

